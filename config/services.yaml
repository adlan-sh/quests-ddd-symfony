# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    exceptions:
        App\Shared\Application\Exception\ValidationException: { code: 422 }
        App\Shared\Application\Exception\RequestBodyConvertException: { code: 400 }
        App\User\Domain\Exception\UserAlreadyExistsException: { code: 409 }
        App\User\Domain\Exception\UserNotFoundException: { code: 404 }
        App\Quest\Domain\Exception\QuestNotFoundException: { code: 404 }
        App\Review\Domain\Exception\QuestWasNotFinishedException: { code: 400 }
        App\Review\Domain\Exception\ReviewAlreadyExistsException: { code : 400 }
        App\Review\Domain\Exception\UserWasNotSubscribedForQuestException: { code: 400 }
        App\Review\Domain\Exception\ReviewNotFoundException: { code: 404 }
        App\User\Domain\Exception\UserCodeIsInvalidException: { code: 400 }
        Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException: { code: 401 }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'

    App\Shared\Application\Resolver\ExceptionMappingResolver:
        arguments: ['%exceptions%']

    App\Shared\Application\Listener\ApiExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, priority: 10 }

    App\Shared\Infrastructure\Bus\CommandBus:
        public: true

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    _instanceof:
        App\Shared\Application\Command\CommandHandlerInterface:
            tags:
                - { name: messenger.message_handler, bus: command.bus }

    App\Shared\Domain\Service\CacheService:
        arguments:
            - '%env(REDIS_HOST)%'
            - '%env(int:REDIS_PORT)%'
            - '%env(int:CACHE_TTL)%'

    app.doctrine_handler:
        class: App\Shared\Infrastructure\Handler\DoctrineHandler
        arguments:
            - "@doctrine.orm.entity_manager"

    App\Shared\Application\Listener\SecurityListener:
        arguments: [ '@monolog.logger.doctrine' ]
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }

    App\User\Application\Listener\JWTAuthenticatedListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }
